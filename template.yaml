AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: SAM template for ni-image-upload architecture.

Parameters:
  AvailabilityZone:
    Type: String
    Description: The availability zone for the subnets
    Default: ap-south-1a
  BucketName:
    Type: String
    Description: Name of the S3 bucket for storing images
    Default: ni-image-upload-bkt
  DatabasePassword:
    Type: String
    Description: Password for the RDS database
    NoEcho: true
  MasterUserPassword:
    Type: String
    Description: Password for the RDS database
    NoEcho: true
  Environment:
    Type: String
    Description: Environment identifier (e.g., dev, staging, prod)
    Default: dev

Resources:
  # VPC Configuration
  NiVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: ni-vpc

  NiPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NiVpc
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Ref AvailabilityZone
      Tags:
        - Key: Name
          Value: ni-private-subnet

  NiPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NiVpc
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: ap-south-1b
      Tags:
        - Key: Name
          Value: ni-private-subnet-2

  NiPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref NiVpc
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Ref AvailabilityZone
      Tags:
        - Key: Name
          Value: ni-public-subnet

  # Internet Gateway
  NiInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ni-internet-gateway

  # Attach Internet Gateway to VPC
  NiAttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref NiVpc
      InternetGatewayId: !Ref NiInternetGateway

  # Route Table for Public Subnet
  NiRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref NiVpc
      Tags:
        - Key: Name
          Value: ni-public-route-table

  # Public Route for Subnet
  NiPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NiRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref NiInternetGateway

  # Public Route Table Association
  NiPublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref NiPublicSubnet
      RouteTableId: !Ref NiRouteTable

  # Private Route for Subnet 1 (via NAT Gateway)
  NiPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NiPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NiNatGateway

  # Private Route for Subnet 2 (via NAT Gateway)
  NiPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NiPrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NiNatGateway

  # Security Group for Lambda and RDSJ
  NiSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref NiVpc
      GroupDescription: Allow Lambda to communicate with RDS
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 10.0.0.0/16
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # S3 Bucket
  NiImageUploadBkt:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ni-image-upload-bkt
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: 365
      Tags:
        - Key: Name
          Value: ni-image-upload-bkt

  # RDS Instance
  NiImgUpldDb:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: ni-img-upld-db
      AllocatedStorage: 20
      DBInstanceClass: db.t4g.micro
      Engine: postgres
      MasterUsername: pgAdmin
      MasterUserPassword: !Ref MasterUserPassword
      VPCSecurityGroups:
        - !Ref NiSecurityGroup
      DBSubnetGroupName: !Ref NiRdsSubnetGroup
      PubliclyAccessible: false

  NiRdsSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for ni-img-upload-db
      SubnetIds:
        - !Ref NiPrivateSubnet
        - !Ref NiPrivateSubnet2

  # Lambda Function
  NiImageUploadFn:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ni-image-upload-fn
      Handler: app.lambda_handler
      CodeUri: image_upload/
      Runtime: python3.13
      MemorySize: 512
      Timeout: 120
      Role: !GetAtt NiLambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref NiSecurityGroup
        SubnetIds:
          - !Ref NiPrivateSubnet
          - !Ref NiPrivateSubnet2
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref NiImageUploadBkt
        - RDSDataReadWritePolicy: {}
        - CloudWatchLogsFullAccess
      Environment:
        Variables:
          BUCKET_NAME: !Ref NiImageUploadBkt
          DB_HOST: !GetAtt NiImgUpldDb.Endpoint.Address
          DB_PORT: "5432"
          DB_NAME: ni-img-upld-db
          DB_USER: pgAdmin
          DB_PASSWORD: !Ref DatabasePassword

  # API Gateway
  NiImgUploadApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: ni-img-upload
      StageName: dev
      Cors:
        AllowMethods: "'POST'"
        AllowHeaders: "'Content-Type'"
        AllowOrigin: "'*'"
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: ni-img-upload
          version: 1.0.0
        paths:
          /images:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub
                  - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
                  - LambdaArn: !GetAtt NiImageUploadFn.Arn
                httpMethod: POST
                type: aws_proxy

  NiLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NiImageUploadFn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/POST/upload

  NiLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource: !Sub
                  - arn:aws:s3:::${BucketName}/*
                  - BucketName: !Ref NiImageUploadBkt
        - PolicyName: RDSAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - rds-db:connect
                Resource: "*"
        - PolicyName: LambdaVpcPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"
        - PolicyName: CloudWatchPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${NiImgUploadApi}.execute-api.${AWS::Region}.amazonaws.com/dev/upload"
    Export:
      Name: ApiUrl
